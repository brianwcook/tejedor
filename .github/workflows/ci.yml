name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.21'
  COVERAGE_THRESHOLD: 80

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run unit tests
      run: go test -v -race -coverprofile=coverage.out ./cache ./config ./pypi ./proxy

    - name: Run integration tests
      run: go test -v -race -coverprofile=integration-coverage.out ./integration
      env:
        # Skip integration tests that require network access in CI
        CI: true

    - name: Merge coverage reports
      run: |
        # Create a combined coverage file
        echo "mode: set" > combined-coverage.out
        tail -n +2 coverage.out >> combined-coverage.out
        tail -n +2 integration-coverage.out >> combined-coverage.out

    - name: Generate coverage report
      run: go tool cover -html=combined-coverage.out -o coverage.html

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=combined-coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Code coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "Coverage ${COVERAGE}% is below threshold ${COVERAGE_THRESHOLD}%"
          exit 1
        fi
        echo "Coverage ${COVERAGE}% meets threshold ${COVERAGE_THRESHOLD}%"

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./combined-coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

    - name: Run golangci-lint
      run: golangci-lint run

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install gosec
      run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

    - name: Run gosec security scan
      run: gosec -fmt=json -out=security-report.json ./...

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build for ${{ matrix.os }}-${{ matrix.arch }}
      run: |
        GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o pypi-proxy-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }} .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: pypi-proxy-${{ matrix.os }}-${{ matrix.arch }}
        path: pypi-proxy-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.os == 'windows' && '.exe' || '' }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Get version from git
      id: get_version
      run: echo "version=$(git describe --tags --always --dirty)" >> $GITHUB_OUTPUT

    - name: Download all build artifacts
      uses: actions/download-artifact@v3

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          pypi-proxy-linux-amd64/pypi-proxy-linux-amd64
          pypi-proxy-linux-arm64/pypi-proxy-linux-arm64
          pypi-proxy-darwin-amd64/pypi-proxy-darwin-amd64
          pypi-proxy-darwin-arm64/pypi-proxy-darwin-arm64
          pypi-proxy-windows-amd64/pypi-proxy-windows-amd64.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 