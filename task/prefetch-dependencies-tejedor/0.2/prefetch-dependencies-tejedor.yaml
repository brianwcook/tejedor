apiVersion: tekton.dev/v1
kind: Task
metadata:
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: "image-build, konflux"
  name: prefetch-dependencies-tejedor
spec:
  description: |-
    Task that uses Hermeto to prefetch build dependencies with Tejedor as a PyPI proxy sidecar for Python dependencies.
    See docs at https://github.com/containerbuildsystem/cachi2#basic-usage.

    ## Configuration

    Config file must be passed as a YAML string. For all available config options please check
    [available configuration parameters] page.

    Example of setting timeouts:

    ```yaml
    params:
      - name: config-file-content
        value: |
          ---
          requests_timeout: 300
          subprocess_timeout: 3600
    ```

    [available configuration parameters]: https://github.com/containerbuildsystem/cachi2?tab=readme-ov-file#available-configuration-parameters

    ## Tejedor Integration

    When Python pip dependencies are detected in the input, this task will:
    1. Start Tejedor as a sidecar container serving as a PyPI proxy
    2. Configure Hermeto to use Tejedor as the PyPI index
    3. Enable wheel downloads in Hermeto configuration
    4. Use the specified private PyPI URL for Tejedor

    The Tejedor sidecar will be automatically terminated when the task completes.
  params:
  - description: Configures project packages that will have their dependencies prefetched.
    name: input
  - description: >
      Enable in-development package managers. WARNING: the behavior may change at any time without
      notice. Use at your own risk.
    name: dev-package-managers
    default: "false"
  - description: Set cachi2 log level (debug, info, warning, error)
    name: log-level
    default: "info"
  - description: |
      Pass configuration to cachi2.
      Note this needs to be passed as a YAML-formatted config dump, not as a file path!
    name: config-file-content
    default: ""
  - name: sbom-type
    default: spdx
    description: "Select the SBOM format to generate. Valid values: spdx, cyclonedx."
  - name: caTrustConfigMapName
    type: string
    description: The name of the ConfigMap to read CA bundle data from.
    default: trusted-ca
  - name: caTrustConfigMapKey
    type: string
    description: The name of the key in the ConfigMap that contains the CA bundle data.
    default: ca-bundle.crt
  - name: ACTIVATION_KEY
    default: activation-key
    description: Name of secret which contains subscription activation key
    type: string
  - name: private-pypi-url
    type: string
    description: URL of the private PyPI server to use with Tejedor
    default: ""
  - name: proxy-server
    type: string
    description: Optional proxy server URL for Tejedor to use for external requests
    default: ""

  stepTemplate:
    env:
      - name: CONFIG_FILE_CONTENT
        value: $(params.config-file-content)
    volumeMounts:
      - name: config
        mountPath: /mnt/config
      - mountPath: /shared
        name: shared
  steps:
  - name: sanitize-cachi2-config-file-with-yq
    image: quay.io/konflux-ci/yq:latest@sha256:15d0238843d954ee78c9c190705eb8b36f6e52c31434183c37d99a80841a635a
    script: |
      if [ -n "${CONFIG_FILE_CONTENT}" ]
      then
        # we need to drop 'goproxy_url' for safety reasons until cachi2 decides what the SBOM
        # impact of this configuration option will be:
        # https://github.com/containerbuildsystem/cachi2/issues/577
        yq 'del(.goproxy_url)' <<< "${CONFIG_FILE_CONTENT}" > /mnt/config/config.yaml
      fi

  - name: detect-python-dependencies
    image: quay.io/konflux-ci/yq:latest@sha256:15d0238843d954ee78c9c190705eb8b36f6e52c31434183c37d99a80841a635a
    script: |
      #!/bin/bash
      set -euo pipefail

      INPUT="$1"
      
      # Check if input contains pip package manager
      if echo "$INPUT" | yq 'any(.type == "pip")' 2>/dev/null || \
         echo "$INPUT" | yq '.packages | any(.type == "pip")' 2>/dev/null || \
         [ "$INPUT" = "pip" ]; then
        echo "true" > /shared/use-tejedor
        echo "Python pip dependencies detected, will use Tejedor sidecar"
      else
        echo "false" > /shared/use-tejedor
        echo "No Python pip dependencies detected, using standard Hermeto"
      fi
    args:
      - $(params.input)

  - name: start-tejedor-sidecar
    image: quay.io/konflux-ci/tejedor:latest@sha256:YOUR_IMAGE_SHA256_HERE
    script: |
      #!/bin/bash
      set -euo pipefail

      if [ "$(cat /shared/use-tejedor)" != "true" ]; then
        echo "No Python dependencies detected, skipping Tejedor sidecar"
        exit 0
      fi

      if [ -z "$(params.private-pypi-url)" ]; then
        echo "ERROR: private-pypi-url parameter is required when Python dependencies are detected"
        exit 1
      fi

      echo "Starting Tejedor sidecar..."
      echo "Private PyPI URL: $(params.private-pypi-url)"
      if [ -n "$(params.proxy-server)" ]; then
        echo "Proxy server: $(params.proxy-server)"
        export HTTP_PROXY="$(params.proxy-server)"
        export HTTPS_PROXY="$(params.proxy-server)"
      fi

      # Start Tejedor in the background
      if [ -n "$(params.proxy-server)" ]; then
        export HTTP_PROXY="$(params.proxy-server)"
        export HTTPS_PROXY="$(params.proxy-server)"
      fi
      
      /pypi-proxy \
        --private-pypi-url="$(params.private-pypi-url)" \
        --port=8080 \
        --cache-enabled=false &
      
      TEJEDOR_PID=$!
      echo $TEJEDOR_PID > /shared/tejedor-pid
      
      # Wait for Tejedor to be ready
      echo "Waiting for Tejedor to be ready..."
      for i in {1..30}; do
        if curl -s http://127.0.0.1:8080/health > /dev/null 2>&1; then
          echo "Tejedor is ready"
          break
        fi
        if [ $i -eq 30 ]; then
          echo "ERROR: Tejedor failed to start within 30 seconds"
          exit 1
        fi
        sleep 1
      done

      # Keep the sidecar running
      wait $TEJEDOR_PID
    env:
      - name: PRIVATE_PYPI_URL
        value: $(params.private-pypi-url)
      - name: PROXY_SERVER
        value: $(params.proxy-server)

  - name: prefetch-dependencies
    image: quay.io/konflux-ci/hermeto:0.31.0@sha256:66727e54af4f4e96911541fc120ef973f1311bd33cc97f7c26bef801fc29f85f
    # per https://kubernetes.io/docs/concepts/containers/images/#imagepullpolicy-defaulting
    # the cluster will set imagePullPolicy to IfNotPresent
    env:
    - name: INPUT
      value: $(params.input)
    - name: DEV_PACKAGE_MANAGERS
      value: $(params.dev-package-managers)
    - name: LOG_LEVEL
      value: $(params.log-level)
    - name: SBOM_TYPE
      value: $(params.sbom-type)
    - name: WORKSPACE_GIT_AUTH_BOUND
      value: $(workspaces.git-basic-auth.bound)
    - name: WORKSPACE_GIT_AUTH_PATH
      value: $(workspaces.git-basic-auth.path)
    - name: WORKSPACE_NETRC_BOUND
      value: $(workspaces.netrc.bound)
    - name: WORKSPACE_NETRC_PATH
      value: $(workspaces.netrc.path)
    - name: USE_TEJEDOR
      value: $(cat /shared/use-tejedor)
    - name: PRIVATE_PYPI_URL
      value: $(params.private-pypi-url)
    volumeMounts:
      - name: trusted-ca
        mountPath: /mnt/trusted-ca
        readOnly: true
      - mountPath: /activation-key
        name: activation-key
      - name: shared
        mountPath: /shared
    computeResources:
      limits:
        memory: 3Gi
      requests:
        cpu: '1'
        memory: 3Gi
    script: |
      #!/bin/bash
      set -euo pipefail

      RHSM_ORG=""
      RHSM_ACT_KEY=""
      ENTITLEMENT_CERT_PATH=""
      ENTITLEMENT_CERT_KEY_PATH=""

      function rhsm_unregister {
        # best effort:
        #   - if the system was already successfully unregistered, the command returns 1
        #   - if unregistering failed/fails, there's not much we can do about it anyway
        subscription-manager unregister || true
      }

      function is_json
      {
        jq . 2>/dev/null 1>&2 <<< "$1"
      }

      # The input JSON can be in one of these forms:
      # 1) '[{"type": "gomod"}, {"type": "bundler"}]'
      # 2) '{"packages": [{"type": "gomod"}, {"type": "bundler"}]}'
      # 3) '{"type": "gomod"}'
      function input_json_has_rpm
      {
        jq '
          if (type == "array" or type == "object") | not then
            false
          elif type == "array" then
            any(.[]; .type == "rpm")
          elif has("packages") | not then
            .type == "rpm"
          elif (.packages | type == "array") then
            any(.packages[]; .type == "rpm")
          else
            false
          end' <<< "$1"
      }

      function inject_ssl_opts
      {
        input="$1"
        ssl_options="$2"

        # Check if input is plain string or JSON and if the request specifies RPMs
        if [ "$input" == "rpm" ]; then
          input="$(jq -n --argjson ssl "$ssl_options" '
                    {
                      type: "rpm",
                      options: {
                        ssl: $ssl
                      }
                    }'
                  )"
        elif is_json "$input" && [[ $(input_json_has_rpm "$input") == true ]]; then
          # The output JSON may need the SSL options updated for the RPM backend
          input="$(jq \
                    --argjson ssl "$ssl_options" '
                      if type == "array" then
                        map(if .type == "rpm" then .options.ssl += $ssl else . end)
                      elif has("packages") then
                        .packages |= map(if .type == "rpm" then .options.ssl += $ssl else . end)
                      else
                        .options.ssl += $ssl
                      end' \
                      <<< "$input"
                  )"
        fi
        echo "$input"
      }

      function inject_rpm_summary_flag
      {
        input="$1"

        if [ "$input" == "rpm" ]; then
          input="$(jq -n '{type: "rpm", include_summary_in_sbom: true}')"

        elif is_json "$input" && [[ $(input_json_has_rpm "$input") == true ]]; then
            input="$(jq '
                      if type == "array" then
                        map(
                          if .type == "rpm" and (has("include_summary_in_sbom") | not) then
                            .include_summary_in_sbom = true
                          else
                            .
                          end)

                      elif has("packages") then
                        .packages |= map(
                          if .type == "rpm" and (has("include_summary_in_sbom") | not) then
                            .include_summary_in_sbom = true
                          else
                            .
                          end)

                      else
                        if has("include_summary_in_sbom") | not then
                          .include_summary_in_sbom = true
                        else
                          .
                        end

                      end' <<< "$input")"
        fi
        echo "$input"
      }

      function configure_pip_for_tejedor
      {
        input="$1"
        
        if [ "$USE_TEJEDOR" != "true" ]; then
          echo "$input"
          return
        fi

        # Configure pip to use Tejedor and enable wheels
        if [ "$input" == "pip" ]; then
          input="$(jq -n '
                    {
                      type: "pip",
                      options: {
                        index_url: "http://127.0.0.1:8080/simple/",
                        allow_wheels: true
                      }
                    }'
                  )"
        elif is_json "$input"; then
          # Update pip entries to use Tejedor
          input="$(jq '
                    if type == "array" then
                      map(
                        if .type == "pip" then
                          .options = (.options // {}) + {
                            index_url: "http://127.0.0.1:8080/simple/",
                            allow_wheels: true
                          }
                        else
                          .
                        end)
                    elif has("packages") then
                      .packages |= map(
                        if .type == "pip" then
                          .options = (.options // {}) + {
                            index_url: "http://127.0.0.1:8080/simple/",
                            allow_wheels: true
                          }
                        else
                          .
                        end)
                    elif .type == "pip" then
                      .options = (.options // {}) + {
                        index_url: "http://127.0.0.1:8080/simple/",
                        allow_wheels: true
                      }
                    else
                      .
                    end' <<< "$input")"
        fi
        echo "$input"
      }

      if [ -z "${INPUT}" ]; then
        # Confirm input was provided
        echo "No prefetch will be performed because no input was provided for cachi2 fetch-deps"
        exit 0
      fi

      if [ -f /mnt/config/config.yaml ]; then
        config_flag=--config-file=/mnt/config/config.yaml
      else
        config_flag=""
      fi

      if [ "$DEV_PACKAGE_MANAGERS" = "true" ]; then
        dev_pacman_flag=--dev-package-managers
      else
        dev_pacman_flag=""
      fi

      # Copied from https://github.com/konflux-ci/build-definitions/blob/main/task/git-clone/0.1/git-clone.yaml
      if [ "${WORKSPACE_GIT_AUTH_BOUND}" = "true" ] ; then
        if [ -f "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" ]; then
          cp "${WORKSPACE_GIT_AUTH_PATH}/.git-credentials" "${HOME}/.git-credentials"
          cp "${WORKSPACE_GIT_AUTH_PATH}/.gitconfig" "${HOME}/.gitconfig"
        # Compatibility with kubernetes.io/basic-auth secrets
        elif [ -f "${WORKSPACE_GIT_AUTH_PATH}/username" ] && [ -f "${WORKSPACE_GIT_AUTH_PATH}/password" ]; then
          HOSTNAME=$(cd "$(workspaces.source.path)/source" && git remote get-url origin | awk -F/ '{print $3}')
          echo "https://$(cat ${WORKSPACE_GIT_AUTH_PATH}/username):$(cat ${WORKSPACE_GIT_AUTH_PATH}/password)@$HOSTNAME" > "${HOME}/.git-credentials"
          echo -e "[credential \"https://$HOSTNAME\"]\n  helper = store" > "${HOME}/.gitconfig"
        else
          echo "Unknown git-basic-auth workspace format"
          exit 1
        fi
        chmod 400 "${HOME}/.git-credentials"
        chmod 400 "${HOME}/.gitconfig"
      fi

      if [ "${WORKSPACE_NETRC_BOUND}" = "true" ]; then
        cp "${WORKSPACE_NETRC_PATH}/.netrc" "${HOME}/.netrc"
      fi

      ca_bundle=/mnt/trusted-ca/ca-bundle.crt
      if [ -f "$ca_bundle" ]; then
        echo "INFO: Using mounted CA bundle: $ca_bundle"
        cp -vf $ca_bundle /etc/pki/ca-trust/source/anchors
        update-ca-trust
      fi

      # RHSM HANDLING: REGISTER RHSM & CACHI2 CONFIGURATION
      if [ -e /activation-key/org ]; then
        RHSM_ORG=$(cat /activation-key/org)
        RHSM_ACT_KEY=$(cat /activation-key/activationkey)

        echo "Registering with Red Hat subscription manager."
        subscription-manager register \
            --org "${RHSM_ORG}" \
            --activationkey "${RHSM_ACT_KEY}" || exit 1

        trap rhsm_unregister EXIT

        entitlement_files="$(ls -1 /etc/pki/entitlement/*.pem)"
        ENTITLEMENT_CERT_KEY_PATH="$(grep -e '-key.pem$' <<< "$entitlement_files")"
        ENTITLEMENT_CERT_PATH="$(grep -v -e '-key.pem$' <<< "$entitlement_files")"
        CA_BUNDLE_PATH="/etc/rhsm/ca/redhat-uep.pem"

        CACHI2_SSL_OPTS="$(jq -n \
                              --arg key "$ENTITLEMENT_CERT_KEY_PATH" \
                              --arg cert "$ENTITLEMENT_CERT_PATH" \
                              --arg ca_bundle "$CA_BUNDLE_PATH" \
                              '{client_key: $key, client_cert: $cert, ca_bundle: $ca_bundle}'
                          )"

        # We need to modify the cachi2 params in place if we're processing RPMs
        INPUT=$(inject_ssl_opts "$INPUT" "$CACHI2_SSL_OPTS")
      fi

      INPUT=$(inject_rpm_summary_flag "$INPUT")
      
      # Configure pip for Tejedor if needed
      INPUT=$(configure_pip_for_tejedor "$INPUT")

      # Some repos with go submodules would fail during prefetch dependencies task
      # Forcing fetching tags serves as a workaround
      if [[ "$(cd "$(workspaces.source.path)/source" && ! git fetch --tags)" ]]; then
        echo "Retrying fetch command..."
        "$(cd "$(workspaces.source.path)/source" && git fetch --tags)"
      fi

      cachi2 --log-level="$LOG_LEVEL" $config_flag fetch-deps \
      $dev_pacman_flag \
      --source="$(workspaces.source.path)/source" \
      --output="$(workspaces.source.path)/cachi2/output" \
      --sbom-output-type="$SBOM_TYPE" \
      "${INPUT}"

      cachi2 --log-level="$LOG_LEVEL" generate-env "$(workspaces.source.path)/cachi2/output" \
      --format env \
      --for-output-dir=/cachi2/output \
      --output "$(workspaces.source.path)/cachi2/cachi2.env"

      cachi2 --log-level="$LOG_LEVEL" inject-files "$(workspaces.source.path)/cachi2/output" \
      --for-output-dir=/cachi2/output

      # hack: the OCI generator would delete the function since it doesn't consider trap a "usage"
      if false; then
        rhsm_unregister
      fi

  sidecars:
  - name: tejedor-sidecar
    image: quay.io/konflux-ci/tejedor:latest@sha256:YOUR_IMAGE_SHA256_HERE
    script: |
      #!/bin/bash
      set -euo pipefail

      if [ "$(cat /shared/use-tejedor)" != "true" ]; then
        echo "No Python dependencies detected, skipping Tejedor sidecar"
        exit 0
      fi

      if [ -z "$(params.private-pypi-url)" ]; then
        echo "ERROR: private-pypi-url parameter is required when Python dependencies are detected"
        exit 1
      fi

      echo "Starting Tejedor sidecar..."
      echo "Private PyPI URL: $(params.private-pypi-url)"
      if [ -n "$(params.proxy-server)" ]; then
        echo "Proxy server: $(params.proxy-server)"
        export HTTP_PROXY="$(params.proxy-server)"
        export HTTPS_PROXY="$(params.proxy-server)"
      fi

      # Start Tejedor
      if [ -n "$(params.proxy-server)" ]; then
        export HTTP_PROXY="$(params.proxy-server)"
        export HTTPS_PROXY="$(params.proxy-server)"
      fi
      
      exec /pypi-proxy \
        --private-pypi-url="$(params.private-pypi-url)" \
        --port=8080 \
        --cache-enabled=false
    env:
      - name: PRIVATE_PYPI_URL
        value: $(params.private-pypi-url)
      - name: PROXY_SERVER
        value: $(params.proxy-server)
    volumeMounts:
      - name: shared
        mountPath: /shared

  workspaces:
  - name: source
    description: Workspace with the source code, cachi2 artifacts will be stored on the workspace as well
  - name: git-basic-auth
    description: |
      A Workspace containing a .gitconfig and .git-credentials file or username and password.
      These will be copied to the user's home before any cachi2 commands are run. Any
      other files in this Workspace are ignored. It is strongly recommended
      to bind a Secret to this Workspace over other volume types.
    optional: true
  - name: netrc
    description: |
      Workspace containing a .netrc file. Cachi2 will use the credentials in this file when
      performing http(s) requests.
    optional: true
  volumes:
    - name: shared
      emptyDir: {}
    - name: etc-pki-entitlement
      emptyDir: {}
    - name: activation-key
      secret:
        optional: true
        secretName: $(params.ACTIVATION_KEY)
    - name: trusted-ca
      configMap:
        name: $(params.caTrustConfigMapName)
        items:
          - key: $(params.caTrustConfigMapKey)
            path: ca-bundle.crt
        optional: true
    - name: config
      emptyDir: {} 